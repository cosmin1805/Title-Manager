plugins {
    id 'java'
}

group = 'ro.iacobai'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = 'https://repo.extendedclip.com/releases/'
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.3-R0.1-SNAPSHOT")
    compileOnly 'me.clip:placeholderapi:2.11.6'
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

def serverPluginsDir = project.hasProperty('serverPluginsDir') ? project.serverPluginsDir : "/default/path"
def minecraftScreenName = project.hasProperty('minecraftScreenName') ? project.minecraftScreenName : "mc-server-dev"

// Clean old JAR before building
tasks.register('cleanJar', Delete) {
    delete file("$serverPluginsDir/TitleManager.jar")
}

// Build and copy the JAR to the server's plugin directory
tasks.jar {
    destinationDirectory.set(file(serverPluginsDir))
    archiveFileName.set("TitleManager.jar")
    dependsOn cleanJar
}

// Task to reload the Minecraft server via a screen session
tasks.register('reloadServer') {
    doLast {
        exec {
            commandLine 'screen', '-S', minecraftScreenName, '-p', '0', '-X', 'stuff', 'reload\n'
        }
        Thread.sleep(1000) // Wait 1 second before confirming
        exec {
            commandLine 'screen', '-S', minecraftScreenName, '-p', '0', '-X', 'stuff', 'reload confirm\n'
        }
    }
}

// Task to switch to the Minecraft console tab (for a screen session)
tasks.register('switchToMinecraftTab') {
    doLast {
        exec {
            commandLine 'xdotool', 'search', '--onlyvisible', '--class', 'minecraft', 'windowactivate'
        }
    }
}

// Task to build, deploy, reload the server, and switch to MC tab
tasks.register('deployPlugin') {
    dependsOn 'build', 'reloadServer', 'switchToMinecraftTab'
}

def getCurrentGitTag() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--exact-match'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception e) {
        return "1.0.0"  // Fallback if no exact match
    }
}

version = getCurrentGitTag()

tasks.register('buildRelease', Jar) {
    archiveBaseName.set("Title-Manager")
    archiveVersion.set(version)
    destinationDirectory.set(file("$rootDir/build/release"))
    from sourceSets.main.output
}
